imports:
    - { resource: permissions.yaml }

parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    Redis:
        class: Redis
        calls:
            - method: connect
              arguments:
                  - '%env(REDIS_HOST)%'
                  - '%env(int:REDIS_PORT)%'

    App\Storage\Sessions\RedisSessionHandler:
        arguments:
            - '@Redis'
            - { prefix: 'session_', database: 0 }

    Aws\S3\S3Client:
        arguments:
            -
                region:  '%aws.region%'
                version: '%aws.version%'
                credentials:
                    key:    '%aws.key%'
                    secret: '%aws.secret%'

    Aws\CloudFront\CloudFrontClient:
        arguments:
            -
                region:  '%aws.region%'
                version: '%aws.version%'
                credentials:
                    key:    '%aws.key%'
                    secret: '%aws.secret%'

    App\Media\CDNInterface:
        class: App\Media\AmazonCDN
        arguments:
            - '@Aws\S3\S3Client'
            - '@Aws\CloudFront\CloudFrontClient'
            - '%cdn%'

    App\Service\ScreenshotService:
        arguments:
            - 'http://127.0.0.1:8080'


    admin.projects:
        class: App\Admin\ProjectAdmin
        arguments: [~, App\Entity\Project, ~]
        calls:
            - [setCDN, ['@App\Media\CDNInterface']]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Projects, label: Projects }

    admin.users:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~]
        calls:
            - [setPasswordEncoder, ['@security.user_password_encoder.generic']]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Users, label: Users }

    admin.content:
        class: App\Admin\ContentAdmin
        arguments: [~, App\Entity\Content, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Content, label: Content }
